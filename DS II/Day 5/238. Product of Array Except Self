class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        prefixProducts = [None] * len(nums)
        product = 1
        for i in range(len(nums)):
            product *= nums[i]
            prefixProducts[i] = product
            
        suffixProducts = [None] * len(nums)
        product = 1
        for i in reversed(range(len(nums))):
            product *= nums[i]
            suffixProducts[i] = product
        
        answer = [None] * len(nums)
        answer[0] = suffixProducts[1]
        answer[len(nums) - 1] = prefixProducts[len(nums) - 2]
        
        for i in range(1, len(nums) - 1):    
            answer[i] = prefixProducts[i - 1] * suffixProducts[i + 1]
        
        return answer
